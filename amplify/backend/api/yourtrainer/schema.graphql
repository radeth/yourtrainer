enum TrainerConnectionState {
  REQUESTED
  CONNECTED
  CLIENT_CLOSED
  TRAINER_CLOSED
}

enum ProfileType {
  CUSTOMER
  TRAINER
}

type Profile @model @auth(rules: [{allow: owner}]) {
  id: ID!
  profileType: ProfileType!
  profilePicture: AWSURL
  name: String!
  userId: ID!
}

type User @model @auth(rules: [{allow: owner}]) {
  id: ID!
  email: String!
  accountType: String!
}

type Exercise @model @auth(rules: [{allow: owner}]) {
  id: ID!
  name: String!
  description: String
}

type Friendship @model @auth(rules: [{allow: owner}]) {
  id: ID!
  Messages: [Message] @hasMany(indexName: "byFriendship", fields: ["id"])
  Customer: Profile! @hasOne
  Trainer: Profile! @hasOne
  connectionState: TrainerConnectionState!
}

enum MessageDirection {
  INCOMING
  OUTGOING
}

type Message @model @auth(rules: [{allow: owner}]) {
  id: ID!
  content: String!
  direction: MessageDirection!
  friend: ID! @index(name: "byFriendship")
}
 